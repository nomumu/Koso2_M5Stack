// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file StampData.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _M5STACK_MSGS_STAMP_DATA_HPP_
#define _M5STACK_MSGS_STAMP_DATA_HPP_

#include "../topic.hpp"

namespace m5stack_msgs {

class StampData : public ros2::Topic<StampData>
{
public:
    uint16_t seq;
    uint16_t index;
    uint16_t total;
    uint16_t length;
    uint8_t  data[1000];

    StampData():
        Topic("m5stack_msgs::msg::dds_::StampData_", "StampData", M5STACK_MSGS_STAMP_DATA_ID)
    {
    }
    bool serialize(void* msg_buf, const StampData* topic)
    {
        ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
        (void) ucdr_serialize_uint16_t(writer, topic->seq);
        (void) ucdr_serialize_uint16_t(writer, topic->index);
        (void) ucdr_serialize_uint16_t(writer, topic->total);
        (void) ucdr_serialize_uint16_t(writer, topic->length);
        (void) ucdr_serialize_array_uint8_t(writer, topic->data, sizeof(topic->data) / sizeof(char));

        return !writer->error;
    }
    bool deserialize(void* msg_buf, StampData* topic)
    {
        ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
        (void) ucdr_deserialize_uint16_t(reader, &topic->seq);
        (void) ucdr_deserialize_uint16_t(reader, &topic->index);
        (void) ucdr_deserialize_uint16_t(reader, &topic->total);
        (void) ucdr_deserialize_uint16_t(reader, &topic->length);
        (void) ucdr_deserialize_array_uint8_t(reader, topic->data, sizeof(topic->data) / sizeof(char));

        return !reader->error;
    }
    uint32_t size_of_topic(const StampData* topic, uint32_t size)
    {
        uint32_t previousSize = size;
        size += ucdr_alignment(size, 2) + 2;
        size += ucdr_alignment(size, 2) + 2;
        size += ucdr_alignment(size, 2) + 2;
        size += ucdr_alignment(size, 2) + 2;
        size += ucdr_alignment(size, 1) + sizeof(topic->data);

        return size - previousSize;
    }
};
}
#endif // _M5STACK_MSGS_STAMP_DATA_HPP_